generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model admin {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?  @db.Uuid
  company_id    String?  @db.Uuid
  assigned_date DateTime @db.Date
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  company       company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?  @db.VarChar(255)
  address      String?  @db.VarChar(255)
  phone_number String?  @db.VarChar(255)
  email        String?  @db.VarChar(255)
  name         String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user_id      String   @db.Uuid
  tenant_id    String   @db.VarChar(255)
  admin        admin[]
  user         user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tool         tool[]
}

model guest {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                        String?  @db.Uuid
  phone_number                   String?  @db.VarChar(255)
  address                        String?  @db.VarChar(255)
  email                          String?  @db.VarChar(255)
  rental_id                      String?  @db.Uuid
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  rental_guest_rental_idTorental rental?  @relation("guest_rental_idTorental", fields: [rental_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                           user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rental_rental_guest_idToguest  rental[] @relation("rental_guest_idToguest")
}

model rental {
  id                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date                    DateTime  @db.Date
  end_date                      DateTime? @db.Date
  total_price                   Int?
  tool_id                       String?   @db.Uuid
  guest_id                      String?   @db.Uuid
  created_at                    DateTime  @default(now()) @db.Timestamp(6)
  updated_at                    DateTime  @default(now()) @db.Timestamp(6)
  guest_guest_rental_idTorental guest[]   @relation("guest_rental_idTorental")
  guest_rental_guest_idToguest  guest?    @relation("rental_guest_idToguest", fields: [guest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tool                          tool?     @relation(fields: [tool_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tool {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(255)
  description   String?  @db.VarChar(255)
  availability  Boolean? @default(true)
  price_per_day Int?
  company_id    String?  @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  rental        rental[]
  company       company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  admin       admin[]
  company     company[]
  guest       guest[]
}
